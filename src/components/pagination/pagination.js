import paginationService from 'services/pagination/pagination';import React, { PropTypes } from 'react';const defaultOffset = 2;const firstPage = 1;const PaginationItem = props => {  const {    disabled,    pageEval,  } = props.config  return (    <li className="c-pagination__item">      <button        disabled={ disabled }        className="c-pagination__button"        onClick={ () => props.onPageChanged(pageEval) }      >{ props.children }      </button>    </li>  )}const Pagination = ( props ) => {  let pagesList, paginationConfig;  let { offset, pages, page, onPageChanged } = props;  offset = offset || defaultOffset;  pagesList = paginationService.getRange(page, pages, offset);  paginationConfig = {    previousSection: {      disabled: (page === firstPage),      pageEval: firstPage,    },    previousPage   : {      disabled: (page === firstPage),      pageEval: page - 1,    },    forwardPage    : {      disabled: (page === pages),      pageEval: (page + 1)    },    forwardSection : {      disabled: (page === pages),      pageEval: pages    }  }  return (    <nav className="c-pagination">      <ol>        <PaginationItem config={ paginationConfig.previousSection }                        onPageChanged={ onPageChanged }>&lt;&lt;        </PaginationItem>        <PaginationItem config={ paginationConfig.previousPage }                        onPageChanged>&lt;        </PaginationItem>        {          pagesList.map(( item, index ) => {            return <li className="c-pagination__item" key={ index }>              <button                disabled={ item === '...' }                className={ `c-pagination__button${item === page ? ' c-pagination__button--current' : ''}` }                onClick={ () => onPageChanged(item) }              >{ item }</button>            </li>          })        }        <PaginationItem config={ paginationConfig.forwardPage }                        onPageChanged={ onPageChanged }>&gt;        </PaginationItem>        <PaginationItem config={ paginationConfig.forwardSection }                        onPageChanged={ onPageChanged }>&gt;&gt;        </PaginationItem>      </ol>    </nav>  );};Pagination.propType = {  onPageChanged: PropTypes.func.isRequired,  offset       : PropTypes.number.isRequired,  pages        : PropTypes.number.isRequired,  page         : PropTypes.number.isRequired}export default Pagination;